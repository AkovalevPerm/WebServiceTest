//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClient.CalculatorService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculatorService.WebServiceCalculatorSoap")]
    public interface WebServiceCalculatorSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sum", ReplyAction="*")]
        double Sum(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sum", ReplyAction="*")]
        System.Threading.Tasks.Task<double> SumAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sub", ReplyAction="*")]
        double Sub(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sub", ReplyAction="*")]
        System.Threading.Tasks.Task<double> SubAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Div", ReplyAction="*")]
        double Div(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Div", ReplyAction="*")]
        System.Threading.Tasks.Task<double> DivAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Mult", ReplyAction="*")]
        double Mult(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Mult", ReplyAction="*")]
        System.Threading.Tasks.Task<double> MultAsync(double x, double y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebServiceCalculatorSoapChannel : WebClient.CalculatorService.WebServiceCalculatorSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceCalculatorSoapClient : System.ServiceModel.ClientBase<WebClient.CalculatorService.WebServiceCalculatorSoap>, WebClient.CalculatorService.WebServiceCalculatorSoap {
        
        public WebServiceCalculatorSoapClient() {
        }
        
        public WebServiceCalculatorSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceCalculatorSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceCalculatorSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceCalculatorSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Sum(double x, double y) {
            return base.Channel.Sum(x, y);
        }
        
        public System.Threading.Tasks.Task<double> SumAsync(double x, double y) {
            return base.Channel.SumAsync(x, y);
        }
        
        public double Sub(double x, double y) {
            return base.Channel.Sub(x, y);
        }
        
        public System.Threading.Tasks.Task<double> SubAsync(double x, double y) {
            return base.Channel.SubAsync(x, y);
        }
        
        public double Div(double x, double y) {
            return base.Channel.Div(x, y);
        }
        
        public System.Threading.Tasks.Task<double> DivAsync(double x, double y) {
            return base.Channel.DivAsync(x, y);
        }
        
        public double Mult(double x, double y) {
            return base.Channel.Mult(x, y);
        }
        
        public System.Threading.Tasks.Task<double> MultAsync(double x, double y) {
            return base.Channel.MultAsync(x, y);
        }
    }
}
